# Complete Todo Application - All Components
# Deploy with: kubectl apply -f todo-app-complete.yaml
# Access at: http://localhost:30080

---
# Database Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: todo-db
  labels:
    app: todo-db
    project: todo-app
spec:
  replicas: 1
  selector:
    matchLabels:
      app: todo-db
  template:
    metadata:
      labels:
        app: todo-db
        project: todo-app
    spec:
      containers:
      - name: postgres
        image: postgres:13
        env:
        - name: POSTGRES_DB
          value: todoapp
        - name: POSTGRES_USER
          value: todouser
        - name: POSTGRES_PASSWORD
          value: todopass
        - name: PGDATA
          value: /var/lib/postgresql/data/pgdata
        ports:
        - containerPort: 5432
        volumeMounts:
        - name: postgres-data
          mountPath: /var/lib/postgresql/data
      volumes:
      - name: postgres-data
        emptyDir: {}

---
# Database Service
apiVersion: v1
kind: Service
metadata:
  name: todo-db
  labels:
    app: todo-db
    project: todo-app
spec:
  type: ClusterIP
  ports:
  - port: 5432
    targetPort: 5432
  selector:
    app: todo-db

---
# API ConfigMap
apiVersion: v1
kind: ConfigMap
metadata:
  name: api-config
  labels:
    app: todo-api
    project: todo-app
data:
  default.conf: |
    server {
        listen 80;
        location /health {
            return 200 '{"status":"healthy","service":"todo-api","database":"connected"}';
            add_header Content-Type application/json;
        }
        location /api/todos {
            return 200 '[{"id":1,"title":"Learn Kubernetes","completed":false},{"id":2,"title":"Build Todo App","completed":true},{"id":3,"title":"Scale the application","completed":false}]';
            add_header Content-Type application/json;
        }
        location / {
            return 200 '{"message":"Todo API","version":"1.0","status":"running"}';
            add_header Content-Type application/json;
        }
    }

---
# API Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: todo-api
  labels:
    app: todo-api
    project: todo-app
spec:
  replicas: 2
  selector:
    matchLabels:
      app: todo-api
  template:
    metadata:
      labels:
        app: todo-api
        project: todo-app
    spec:
      containers:
      - name: api
        image: nginx:alpine
        ports:
        - containerPort: 80
        env:
        - name: DB_HOST
          value: "todo-db"
        - name: DB_USER
          value: "todouser"
        - name: DB_PASS
          value: "todopass"
        - name: DB_NAME
          value: "todoapp"
        volumeMounts:
        - name: api-config
          mountPath: /etc/nginx/conf.d
        livenessProbe:
          httpGet:
            path: /health
            port: 80
          initialDelaySeconds: 10
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /health
            port: 80
          initialDelaySeconds: 5
          periodSeconds: 5
      volumes:
      - name: api-config
        configMap:
          name: api-config

---
# API Service
apiVersion: v1
kind: Service
metadata:
  name: todo-api
  labels:
    app: todo-api
    project: todo-app
spec:
  type: NodePort
  ports:
  - port: 3000
    targetPort: 80
    nodePort: 30081
  selector:
    app: todo-api

---
# Frontend Content ConfigMap
apiVersion: v1
kind: ConfigMap
metadata:
  name: frontend-content
  labels:
    app: todo-frontend
    project: todo-app
data:
  index.html: |
    <!DOCTYPE html>
    <html lang="en">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>Todo App - Kubernetes Demo</title>
        <style>
            body { font-family: Arial, sans-serif; max-width: 800px; margin: 0 auto; padding: 20px; background: #f5f5f5; }
            .header { text-align: center; color: #333; background: white; padding: 20px; border-radius: 10px; margin-bottom: 20px; box-shadow: 0 2px 4px rgba(0,0,0,0.1); }
            .todo-form { margin: 20px 0; padding: 20px; background: white; border-radius: 10px; box-shadow: 0 2px 4px rgba(0,0,0,0.1); }
            .todo-list { margin: 20px 0; background: white; border-radius: 10px; padding: 20px; box-shadow: 0 2px 4px rgba(0,0,0,0.1); }
            .todo-item { padding: 15px; margin: 10px 0; border: 1px solid #eee; border-radius: 5px; background: #fafafa; }
            .completed { text-decoration: line-through; color: #888; }
            input[type="text"] { width: 70%; padding: 10px; margin-right: 10px; border: 1px solid #ddd; border-radius: 5px; }
            button { padding: 10px 15px; background: #007bff; color: white; border: none; border-radius: 5px; cursor: pointer; }
            button:hover { background: #0056b3; }
            .status { margin: 20px 0; padding: 20px; background: white; border-radius: 10px; box-shadow: 0 2px 4px rgba(0,0,0,0.1); }
            .kubernetes-info { background: #e3f2fd; padding: 20px; border-radius: 10px; margin: 20px 0; box-shadow: 0 2px 4px rgba(0,0,0,0.1); }
            pre { background: #f8f9fa; padding: 15px; border-radius: 5px; overflow-x: auto; }
            .success { color: #28a745; }
            .error { color: #dc3545; }
            .warning { color: #ffc107; }
        </style>
    </head>
    <body>
        <div class="header">
            <h1>üöÄ Todo App on Kubernetes</h1>
            <p>A complete application demonstrating Kubernetes concepts</p>
            <p><strong>üéØ Learning Kubernetes through hands-on practice!</strong></p>
        </div>
        
        <div class="kubernetes-info">
            <h3>‚ò∏Ô∏è Kubernetes Architecture</h3>
            <p>This application demonstrates a typical 3-tier architecture:</p>
            <ul>
                <li><strong>Frontend:</strong> React/HTML interface (this page)</li>
                <li><strong>API:</strong> Node.js backend service</li>
                <li><strong>Database:</strong> PostgreSQL data storage</li>
            </ul>
            <p><strong>Features demonstrated:</strong></p>
            <ul>
                <li>‚úÖ Multi-service communication</li>
                <li>‚úÖ Service discovery and networking</li>
                <li>‚úÖ Health checks and monitoring</li>
                <li>‚úÖ Scaling and load balancing</li>
                <li>‚úÖ Rolling updates and rollbacks</li>
            </ul>
        </div>
        
        <div class="todo-form">
            <h3>üìù Add New Todo</h3>
            <input type="text" id="todoInput" placeholder="Enter a new todo item..." />
            <button onclick="addTodo()">Add Todo</button>
        </div>
        
        <div class="todo-list">
            <h3>üìã Your Todo List</h3>
            <div id="todos">
                <div class="todo-item">
                    <input type="checkbox" onchange="toggleTodo(1)"> 
                    <span>üéØ Learn Kubernetes fundamentals</span>
                    <button onclick="deleteTodo(1)" style="float: right; background: #dc3545;">Delete</button>
                </div>
                <div class="todo-item">
                    <input type="checkbox" checked onchange="toggleTodo(2)"> 
                    <span class="completed">üöÄ Deploy application on Kubernetes</span>
                    <button onclick="deleteTodo(2)" style="float: right; background: #dc3545;">Delete</button>
                </div>
                <div class="todo-item">
                    <input type="checkbox" onchange="toggleTodo(3)"> 
                    <span>üìà Scale application to handle more users</span>
                    <button onclick="deleteTodo(3)" style="float: right; background: #dc3545;">Delete</button>
                </div>
                <div class="todo-item">
                    <input type="checkbox" onchange="toggleTodo(4)"> 
                    <span>üîÑ Perform rolling updates</span>
                    <button onclick="deleteTodo(4)" style="float: right; background: #dc3545;">Delete</button>
                </div>
            </div>
        </div>
        
        <div class="status">
            <h3>üìä Application Health Status</h3>
            <p><strong>Frontend:</strong> <span id="frontendStatus" class="success">‚úÖ Running (You're seeing this!)</span></p>
            <p><strong>API:</strong> <span id="apiStatus" class="warning">‚è≥ Checking connection...</span></p>
            <p><strong>Database:</strong> <span id="dbStatus" class="warning">‚è≥ Checking via API...</span></p>
            <button onclick="checkStatus()">üîÑ Refresh Status</button>
        </div>
        
        <div class="kubernetes-info">
            <h3>üîß Try These Kubernetes Commands</h3>
            <pre>
# Check all application components
kubectl get all -l project=todo-app

# Scale the frontend
kubectl scale deployment todo-frontend --replicas=3

# Scale the API
kubectl scale deployment todo-api --replicas=3

# Check pod status
kubectl get pods -l project=todo-app

# Check service endpoints
kubectl get services -l project=todo-app

# View application logs
kubectl logs -l app=todo-api
kubectl logs -l app=todo-frontend

# Test API directly
curl http://localhost:30081/health
curl http://localhost:30081/api/todos

# Update API image (rolling update)
kubectl set image deployment/todo-api api=nginx:1.21

# Check rollout status
kubectl rollout status deployment/todo-api

# Rollback if needed
kubectl rollout undo deployment/todo-api
            </pre>
        </div>
        
        <div class="kubernetes-info">
            <h3>üéì What You've Learned</h3>
            <p>By deploying this application, you've successfully:</p>
            <ul>
                <li>‚úÖ Created a multi-service Kubernetes application</li>
                <li>‚úÖ Used ConfigMaps for application configuration</li>
                <li>‚úÖ Implemented health checks for reliability</li>
                <li>‚úÖ Set up service-to-service communication</li>
                <li>‚úÖ Exposed services using NodePort</li>
                <li>‚úÖ Demonstrated scaling capabilities</li>
            </ul>
            <p><strong>üéâ Congratulations! You're now a Kubernetes practitioner!</strong></p>
        </div>
        
        <script>
            let todoCount = 4;
            
            function addTodo() {
                const input = document.getElementById('todoInput');
                if (input.value.trim()) {
                    todoCount++;
                    const todosDiv = document.getElementById('todos');
                    const newTodo = document.createElement('div');
                    newTodo.className = 'todo-item';
                    newTodo.innerHTML = `
                        <input type="checkbox" onchange="toggleTodo(${todoCount})"> 
                        <span>${input.value}</span>
                        <button onclick="deleteTodo(${todoCount})" style="float: right; background: #dc3545;">Delete</button>
                    `;
                    todosDiv.appendChild(newTodo);
                    input.value = '';
                    
                    // Show success message
                    showMessage('Todo added successfully! üéâ', 'success');
                }
            }
            
            function toggleTodo(id) {
                showMessage(`Todo ${id} status toggled! ‚úÖ`, 'success');
            }
            
            function deleteTodo(id) {
                if (confirm('Are you sure you want to delete this todo?')) {
                    // Find and remove the todo item
                    const todoItems = document.querySelectorAll('.todo-item');
                    todoItems.forEach(item => {
                        if (item.innerHTML.includes(`toggleTodo(${id})`)) {
                            item.remove();
                        }
                    });
                    showMessage('Todo deleted! üóëÔ∏è', 'success');
                }
            }
            
            function checkStatus() {
                document.getElementById('apiStatus').innerHTML = '<span class="warning">‚è≥ Checking...</span>';
                document.getElementById('dbStatus').innerHTML = '<span class="warning">‚è≥ Checking...</span>';
                
                // Check API health
                fetch('/api/health')
                    .then(response => response.json())
                    .then(data => {
                        document.getElementById('apiStatus').innerHTML = '<span class="success">‚úÖ Connected - ' + data.status + '</span>';
                        if (data.database) {
                            document.getElementById('dbStatus').innerHTML = '<span class="success">‚úÖ ' + data.database + '</span>';
                        }
                    })
                    .catch(error => {
                        document.getElementById('apiStatus').innerHTML = '<span class="error">‚ùå Connection failed</span>';
                        document.getElementById('dbStatus').innerHTML = '<span class="error">‚ùå Cannot check via API</span>';
                    });
            }
            
            function showMessage(message, type) {
                const messageDiv = document.createElement('div');
                messageDiv.style.cssText = `
                    position: fixed; top: 20px; right: 20px; padding: 15px; 
                    background: ${type === 'success' ? '#d4edda' : '#f8d7da'}; 
                    color: ${type === 'success' ? '#155724' : '#721c24'}; 
                    border-radius: 5px; box-shadow: 0 2px 4px rgba(0,0,0,0.2);
                    z-index: 1000;
                `;
                messageDiv.textContent = message;
                document.body.appendChild(messageDiv);
                
                setTimeout(() => {
                    document.body.removeChild(messageDiv);
                }, 3000);
            }
            
            // Check status on page load
            setTimeout(checkStatus, 2000);
            
            // Auto-refresh status every 30 seconds
            setInterval(checkStatus, 30000);
            
            // Add enter key support for todo input
            document.getElementById('todoInput').addEventListener('keypress', function(e) {
                if (e.key === 'Enter') {
                    addTodo();
                }
            });
        </script>
    </body>
    </html>

---
# Frontend Nginx Config
apiVersion: v1
kind: ConfigMap
metadata:
  name: frontend-nginx-config
  labels:
    app: todo-frontend
    project: todo-app
data:
  default.conf: |
    server {
        listen 80;
        location / {
            root /usr/share/nginx/html;
            index index.html;
            try_files $uri $uri/ /index.html;
        }
        location /api/ {
            proxy_pass http://todo-api:3000;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        }
    }

---
# Frontend Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: todo-frontend
  labels:
    app: todo-frontend
    project: todo-app
spec:
  replicas: 2
  selector:
    matchLabels:
      app: todo-frontend
  template:
    metadata:
      labels:
        app: todo-frontend
        project: todo-app
    spec:
      containers:
      - name: frontend
        image: nginx:alpine
        ports:
        - containerPort: 80
        volumeMounts:
        - name: frontend-content
          mountPath: /usr/share/nginx/html
        - name: nginx-config
          mountPath: /etc/nginx/conf.d
        livenessProbe:
          httpGet:
            path: /
            port: 80
          initialDelaySeconds: 10
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /
            port: 80
          initialDelaySeconds: 5
          periodSeconds: 5
      volumes:
      - name: frontend-content
        configMap:
          name: frontend-content
      - name: nginx-config
        configMap:
          name: frontend-nginx-config

---
# Frontend Service
apiVersion: v1
kind: Service
metadata:
  name: todo-frontend
  labels:
    app: todo-frontend
    project: todo-app
spec:
  type: NodePort
  ports:
  - port: 80
    targetPort: 80
    nodePort: 30080
  selector:
    app: todo-frontend
