# Simple API Service for Todo App
apiVersion: v1
kind: ConfigMap
metadata:
  name: api-code
  namespace: todo-app
data:
  server.js: |
    const express = require('express');
    const { Pool } = require('pg');
    const cors = require('cors');
    
    const app = express();
    app.use(cors());
    app.use(express.json());
    
    // Database connection
    const pool = new Pool({
      host: 'database-service',
      port: 5432,
      database: 'todoapp',
      user: 'postgres',
      password: 'password123'
    });
    
    // Create table if not exists
    pool.query(`
      CREATE TABLE IF NOT EXISTS todos (
        id SERIAL PRIMARY KEY,
        text TEXT NOT NULL,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
      )
    `).catch(console.error);
    
    // Routes
    app.get('/health', (req, res) => res.json({ status: 'ok' }));
    
    app.get('/todos', async (req, res) => {
      try {
        const result = await pool.query('SELECT * FROM todos ORDER BY created_at DESC');
        res.json(result.rows);
      } catch (err) {
        res.status(500).json({ error: err.message });
      }
    });
    
    app.post('/todos', async (req, res) => {
      try {
        const { text } = req.body;
        const result = await pool.query('INSERT INTO todos (text) VALUES ($1) RETURNING *', [text]);
        res.json(result.rows[0]);
      } catch (err) {
        res.status(500).json({ error: err.message });
      }
    });
    
    app.delete('/todos/:id', async (req, res) => {
      try {
        await pool.query('DELETE FROM todos WHERE id = $1', [req.params.id]);
        res.json({ message: 'deleted' });
      } catch (err) {
        res.status(500).json({ error: err.message });
      }
    });
    
    app.listen(3000, () => console.log('API running on port 3000'));
  
  package.json: |
    {
      "name": "todo-api",
      "dependencies": {
        "express": "^4.18.0",
        "pg": "^8.8.0",
        "cors": "^2.8.5"
      },
      "scripts": {
        "start": "node server.js"
      }
    }
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: api-service
  namespace: todo-app
spec:
  replicas: 1
  selector:
    matchLabels:
      app: api-service
  template:
    metadata:
      labels:
        app: api-service
    spec:
      containers:
      - name: api
        image: node:16-alpine
        ports:
        - containerPort: 3000
        workingDir: /app
        command: ["/bin/sh", "-c", "npm install && npm start"]
        volumeMounts:
        - name: code
          mountPath: /app
      volumes:
      - name: code
        configMap:
          name: api-code
---
apiVersion: v1
kind: Service
metadata:
  name: api-service
  namespace: todo-app
spec:
  selector:
    app: api-service
  ports:
  - port: 3000
    targetPort: 3000
