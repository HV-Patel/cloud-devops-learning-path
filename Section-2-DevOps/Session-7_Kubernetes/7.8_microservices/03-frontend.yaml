# Frontend Service - References app/frontend/ directory
apiVersion: v1
kind: ConfigMap
metadata:
  name: frontend-files
  namespace: todo-app
data:
  index.html: |
    <!DOCTYPE html>
    <html lang="en">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>üìù Simple Todo App</title>
        <link rel="stylesheet" href="style.css">
    </head>
    <body>
        <div class="container">
            <h1>üìù Simple Todo App</h1>
            <p class="subtitle">üèÜ Built with Kubernetes Microservices!</p>
            
            <div class="add-todo">
                <input type="text" id="todoInput" placeholder="What do you need to do?" maxlength="100">
                <button onclick="addTodo()">Add Todo</button>
            </div>
            
            <div id="status" class="status" style="display: none;"></div>
            <div id="todos" class="todos-container"></div>
        </div>

        <script src="script.js"></script>
    </body>
    </html>
  
  style.css: |
    body {
        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        margin: 0;
        padding: 20px;
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        min-height: 100vh;
        color: white;
    }

    .container {
        max-width: 600px;
        margin: 0 auto;
        background: rgba(255, 255, 255, 0.1);
        padding: 30px;
        border-radius: 15px;
        backdrop-filter: blur(10px);
        border: 1px solid rgba(255, 255, 255, 0.2);
        box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
    }

    h1 {
        text-align: center;
        font-size: 2.5em;
        margin-bottom: 10px;
        text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.3);
    }

    .subtitle {
        text-align: center;
        margin-bottom: 30px;
        font-size: 1.1em;
        opacity: 0.9;
    }

    .add-todo {
        display: flex;
        gap: 10px;
        margin-bottom: 20px;
    }

    input[type="text"] {
        flex: 1;
        padding: 15px;
        border: none;
        border-radius: 8px;
        font-size: 16px;
        background: rgba(255, 255, 255, 0.9);
        color: #333;
    }

    button {
        padding: 15px 25px;
        border: none;
        border-radius: 8px;
        background: #ffd700;
        color: #333;
        font-size: 16px;
        font-weight: bold;
        cursor: pointer;
        transition: all 0.3s ease;
    }

    button:hover {
        background: #ffed4e;
        transform: translateY(-2px);
    }

    .status {
        text-align: center;
        padding: 10px;
        margin: 10px 0;
        border-radius: 8px;
        font-weight: bold;
    }

    .status.loading { background: rgba(255, 193, 7, 0.2); color: #ffc107; }
    .status.success { background: rgba(40, 167, 69, 0.2); color: #28a745; }
    .status.error { background: rgba(220, 53, 69, 0.2); color: #dc3545; }

    .todo {
        background: rgba(255, 255, 255, 0.1);
        margin: 10px 0;
        padding: 15px;
        border-radius: 8px;
        display: flex;
        justify-content: space-between;
        align-items: center;
        border: 1px solid rgba(255, 255, 255, 0.2);
    }

    .todo-text {
        flex: 1;
        font-size: 16px;
        word-break: break-word;
    }

    .delete-btn {
        background: #ff4757;
        color: white;
        padding: 8px 15px;
        font-size: 14px;
        margin-left: 10px;
    }

    .delete-btn:hover {
        background: #ff3838;
    }

    .empty-state {
        text-align: center;
        padding: 40px 20px;
        opacity: 0.7;
        font-style: italic;
    }
  
  script.js: |
    const API_BASE = '/api';

    document.addEventListener('DOMContentLoaded', function() {
        loadTodos();
        
        document.getElementById('todoInput').addEventListener('keypress', function(e) {
            if (e.key === 'Enter') {
                addTodo();
            }
        });
    });

    async function loadTodos() {
        try {
            showStatus('Loading todos...', 'loading');
            
            const response = await fetch(`${API_BASE}/todos`);
            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }
            
            const todos = await response.json();
            displayTodos(todos);
            hideStatus();
            
        } catch (error) {
            console.error('Error loading todos:', error);
            showStatus('‚ùå Error loading todos', 'error');
            document.getElementById('todos').innerHTML = '<div class="empty-state">Failed to load todos</div>';
        }
    }

    async function addTodo() {
        const input = document.getElementById('todoInput');
        const text = input.value.trim();
        
        if (!text) {
            showStatus('‚ö†Ô∏è Please enter a todo!', 'error');
            return;
        }
        
        try {
            showStatus('Adding todo...', 'loading');
            
            const response = await fetch(`${API_BASE}/todos`, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ text: text })
            });
            
            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }
            
            input.value = '';
            showStatus('‚úÖ Todo added!', 'success');
            setTimeout(hideStatus, 2000);
            loadTodos();
            
        } catch (error) {
            console.error('Error adding todo:', error);
            showStatus('‚ùå Error adding todo', 'error');
        }
    }

    async function deleteTodo(id) {
        try {
            showStatus('Deleting todo...', 'loading');
            
            const response = await fetch(`${API_BASE}/todos/${id}`, {
                method: 'DELETE'
            });
            
            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }
            
            showStatus('‚úÖ Todo deleted!', 'success');
            setTimeout(hideStatus, 2000);
            loadTodos();
            
        } catch (error) {
            console.error('Error deleting todo:', error);
            showStatus('‚ùå Error deleting todo', 'error');
        }
    }

    function displayTodos(todos) {
        const todosContainer = document.getElementById('todos');
        
        if (todos.length === 0) {
            todosContainer.innerHTML = '<div class="empty-state">üéâ No todos yet! Add one above.</div>';
            return;
        }
        
        todosContainer.innerHTML = todos.map(todo => `
            <div class="todo">
                <span class="todo-text">${escapeHtml(todo.text)}</span>
                <button class="delete-btn" onclick="deleteTodo(${todo.id})">Delete</button>
            </div>
        `).join('');
    }

    function showStatus(message, type) {
        const status = document.getElementById('status');
        status.textContent = message;
        status.className = `status ${type}`;
        status.style.display = 'block';
    }

    function hideStatus() {
        document.getElementById('status').style.display = 'none';
    }

    function escapeHtml(text) {
        const div = document.createElement('div');
        div.textContent = text;
        return div.innerHTML;
    }
  
  nginx.conf: |
    server {
        listen 80;
        server_name localhost;
        root /usr/share/nginx/html;
        index index.html;
        
        location / {
            try_files $uri $uri/ /index.html;
        }
        
        location /api/ {
            proxy_pass http://api-service:3000/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
        }
        
        location /health {
            return 200 "healthy\n";
            add_header Content-Type text/plain;
        }
    }
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: frontend
  namespace: todo-app
spec:
  replicas: 1
  selector:
    matchLabels:
      app: frontend
  template:
    metadata:
      labels:
        app: frontend
    spec:
      containers:
      - name: nginx
        image: nginx:alpine
        ports:
        - containerPort: 80
        volumeMounts:
        - name: html-files
          mountPath: /usr/share/nginx/html
        - name: nginx-config
          mountPath: /etc/nginx/conf.d
      volumes:
      - name: html-files
        configMap:
          name: frontend-files
      - name: nginx-config
        configMap:
          name: frontend-files
          items:
          - key: nginx.conf
            path: default.conf
---
apiVersion: v1
kind: Service
metadata:
  name: frontend-service
  namespace: todo-app
spec:
  selector:
    app: frontend
  ports:
  - port: 80
    targetPort: 80
