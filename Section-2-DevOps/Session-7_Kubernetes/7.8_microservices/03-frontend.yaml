# Simple Frontend for Todo App
apiVersion: v1
kind: ConfigMap
metadata:
  name: frontend-code
  namespace: todo-app
data:
  index.html: |
    <!DOCTYPE html>
    <html>
    <head>
        <title>üìù Todo App</title>
        <style>
            body { font-family: Arial; max-width: 600px; margin: 50px auto; padding: 20px; }
            h1 { text-align: center; color: #333; }
            .add-todo { display: flex; gap: 10px; margin: 20px 0; }
            input { flex: 1; padding: 10px; border: 1px solid #ddd; border-radius: 4px; }
            button { padding: 10px 20px; background: #007bff; color: white; border: none; border-radius: 4px; cursor: pointer; }
            button:hover { background: #0056b3; }
            .todo { padding: 10px; margin: 5px 0; background: #f8f9fa; border-radius: 4px; display: flex; justify-content: space-between; }
            .delete-btn { background: #dc3545; padding: 5px 10px; font-size: 12px; }
            .delete-btn:hover { background: #c82333; }
        </style>
    </head>
    <body>
        <h1>üìù Simple Todo App</h1>
        <p style="text-align: center;">üèÜ Built with Kubernetes Microservices!</p>
        
        <div class="add-todo">
            <input type="text" id="todoInput" placeholder="What do you need to do?" maxlength="100">
            <button onclick="addTodo()">Add Todo</button>
        </div>
        
        <div id="todos"></div>

        <script>
            const API = '/api';
            
            // Load todos when page loads
            loadTodos();
            
            // Add todo on Enter key
            document.getElementById('todoInput').addEventListener('keypress', function(e) {
                if (e.key === 'Enter') addTodo();
            });
            
            async function loadTodos() {
                try {
                    const response = await fetch(`${API}/todos`);
                    const todos = await response.json();
                    
                    const todosDiv = document.getElementById('todos');
                    if (todos.length === 0) {
                        todosDiv.innerHTML = '<p>No todos yet. Add one above!</p>';
                        return;
                    }
                    
                    todosDiv.innerHTML = todos.map(todo => `
                        <div class="todo">
                            <span>${todo.text}</span>
                            <button class="delete-btn" onclick="deleteTodo(${todo.id})">Delete</button>
                        </div>
                    `).join('');
                } catch (error) {
                    document.getElementById('todos').innerHTML = '<p>Error loading todos</p>';
                }
            }
            
            async function addTodo() {
                const input = document.getElementById('todoInput');
                const text = input.value.trim();
                
                if (!text) return;
                
                try {
                    await fetch(`${API}/todos`, {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ text })
                    });
                    
                    input.value = '';
                    loadTodos();
                } catch (error) {
                    alert('Error adding todo');
                }
            }
            
            async function deleteTodo(id) {
                try {
                    await fetch(`${API}/todos/${id}`, { method: 'DELETE' });
                    loadTodos();
                } catch (error) {
                    alert('Error deleting todo');
                }
            }
        </script>
    </body>
    </html>
  
  nginx.conf: |
    server {
        listen 80;
        root /usr/share/nginx/html;
        index index.html;
        
        location / {
            try_files $uri $uri/ /index.html;
        }
        
        location /api/ {
            proxy_pass http://api-service:3000/;
        }
    }
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: frontend
  namespace: todo-app
spec:
  replicas: 1
  selector:
    matchLabels:
      app: frontend
  template:
    metadata:
      labels:
        app: frontend
    spec:
      containers:
      - name: nginx
        image: nginx:alpine
        ports:
        - containerPort: 80
        volumeMounts:
        - name: html
          mountPath: /usr/share/nginx/html
        - name: config
          mountPath: /etc/nginx/conf.d
      volumes:
      - name: html
        configMap:
          name: frontend-code
          items:
          - key: index.html
            path: index.html
      - name: config
        configMap:
          name: frontend-code
          items:
          - key: nginx.conf
            path: default.conf
---
apiVersion: v1
kind: Service
metadata:
  name: frontend-service
  namespace: todo-app
spec:
  selector:
    app: frontend
  ports:
  - port: 80
    targetPort: 80
