# API Gateway Service
apiVersion: v1
kind: ConfigMap
metadata:
  name: api-gateway-config
  namespace: ecommerce
data:
  app.js: |
    const express = require('express');
    const { createProxyMiddleware } = require('http-proxy-middleware');
    const app = express();
    const PORT = 4000;

    // Middleware
    app.use(express.json());

    // Health check
    app.get('/health', (req, res) => {
      res.json({ 
        status: 'healthy', 
        service: 'api-gateway',
        timestamp: new Date().toISOString(),
        uptime: process.uptime()
      });
    });

    // Service routes
    const services = {
      users: 'http://user-service:3000',
      products: 'http://product-service:3001', 
      orders: 'http://order-service:3002',
      payments: 'http://payment-service:3003'
    };

    // Proxy middleware for each service
    Object.keys(services).forEach(service => {
      app.use(`/${service}`, createProxyMiddleware({
        target: services[service],
        changeOrigin: true,
        pathRewrite: {
          [`^/${service}`]: '',
        },
        onError: (err, req, res) => {
          console.error(`Proxy error for ${service}:`, err.message);
          res.status(503).json({ error: `Service ${service} unavailable` });
        }
      }));
    });

    // Default route
    app.get('/', (req, res) => {
      res.json({
        message: 'E-commerce API Gateway',
        services: Object.keys(services),
        endpoints: {
          health: '/health',
          users: '/users/*',
          products: '/products/*',
          orders: '/orders/*',
          payments: '/payments/*'
        }
      });
    });

    app.listen(PORT, () => {
      console.log(`API Gateway running on port ${PORT}`);
    });
  package.json: |
    {
      "name": "api-gateway",
      "version": "1.0.0",
      "main": "app.js",
      "dependencies": {
        "express": "^4.18.0",
        "http-proxy-middleware": "^2.0.0"
      },
      "scripts": {
        "start": "node app.js"
      }
    }
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: api-gateway
  namespace: ecommerce
  labels:
    app: api-gateway
spec:
  replicas: 2
  selector:
    matchLabels:
      app: api-gateway
  template:
    metadata:
      labels:
        app: api-gateway
    spec:
      containers:
      - name: api-gateway
        image: node:16-alpine
        ports:
        - containerPort: 4000
        workingDir: /app
        command: ["/bin/sh"]
        args: ["-c", "npm install && npm start"]
        volumeMounts:
        - name: app-code
          mountPath: /app
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
          limits:
            memory: "256Mi"
            cpu: "200m"
        livenessProbe:
          httpGet:
            path: /health
            port: 4000
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /health
            port: 4000
          initialDelaySeconds: 10
          periodSeconds: 5
        env:
        - name: NODE_ENV
          value: "production"
      volumes:
      - name: app-code
        configMap:
          name: api-gateway-config
---
apiVersion: v1
kind: Service
metadata:
  name: api-gateway-service
  namespace: ecommerce
spec:
  selector:
    app: api-gateway
  ports:
  - port: 4000
    targetPort: 4000
  type: ClusterIP
