# ============================================================================
# Terraform Local File Example
# This configuration creates local files to demonstrate Terraform basics
# ============================================================================

# Configure the Local provider
terraform {
  required_providers {
    local = {
      source  = "hashicorp/local"
      version = "~> 2.4"
    }
  }
  required_version = ">= 1.0"
}

# ============================================================================
# LOCAL FILE RESOURCES
# ============================================================================

# Resource 1: Simple text file
resource "local_file" "welcome" {
  # File content
  content = <<-EOT
    Welcome to Terraform!
    
    This file was created by Terraform on ${timestamp()}.
    
    Project: Local File Example
    Purpose: Learning Terraform basics
    
    Key Concepts Demonstrated:
    - Resource creation
    - String interpolation
    - Built-in functions
    - State management
    
    Next Steps:
    - Explore terraform show
    - Try terraform plan
    - Modify this content and apply again
  EOT
  
  # File path and name
  filename = "${path.module}/welcome.txt"
  
  # File permissions (optional)
  file_permission = "0644"
}

# Resource 2: JSON configuration file
resource "local_file" "config" {
  content = jsonencode({
    application = {
      name        = "terraform-demo"
      version     = "1.0.0"
      environment = "development"
      created_by  = "terraform"
      timestamp   = timestamp()
    }
    
    settings = {
      debug_mode    = true
      log_level     = "info"
      max_retries   = 3
      timeout_seconds = 30
    }
    
    features = [
      "local-file-creation",
      "json-encoding",
      "terraform-functions"
    ]
  })
  
  filename        = "${path.module}/config.json"
  file_permission = "0644"
}

# Resource 3: Shell script file
resource "local_file" "script" {
  content = <<-EOT
    #!/bin/bash
    
    # Generated by Terraform
    # Creation time: ${timestamp()}
    
    echo "==================================="
    echo "Terraform Local File Demo Script"
    echo "==================================="
    echo ""
    echo "This script was generated by Terraform!"
    echo "Current directory: $(pwd)"
    echo "Current time: $(date)"
    echo "Files in directory:"
    ls -la
    echo ""
    echo "Terraform state information:"
    if [ -f "terraform.tfstate" ]; then
        echo "State file exists - $(wc -l < terraform.tfstate) lines"
    else
        echo "No state file found"
    fi
    echo ""
    echo "Script execution complete!"
  EOT
  
  filename        = "${path.module}/demo-script.sh"
  file_permission = "0755"  # Executable permissions
}

# Resource 4: Sensitive file (demonstrates sensitive handling)
resource "local_sensitive_file" "secrets" {
  content = <<-EOT
    # Sensitive Configuration File
    # Created by Terraform: ${timestamp()}
    
    # This demonstrates sensitive file handling
    # Content won't be displayed in terraform plan/apply output
    
    api_key=demo-key-${random_id.api_key.hex}
    database_password=demo-password-${random_id.db_password.hex}
    encryption_key=${random_id.encryption_key.hex}
    
    # Note: In real scenarios, never store actual secrets in Terraform files
    # Use proper secret management solutions instead
  EOT
  
  filename        = "${path.module}/secrets.env"
  file_permission = "0600"  # Restricted permissions
}

# ============================================================================
# SUPPORTING RESOURCES
# ============================================================================

# Generate random IDs for demonstration
resource "random_id" "api_key" {
  byte_length = 16
}

resource "random_id" "db_password" {
  byte_length = 12
}

resource "random_id" "encryption_key" {
  byte_length = 32
}

# ============================================================================
# OUTPUTS
# ============================================================================

# Output the created file paths
output "created_files" {
  description = "List of files created by this Terraform configuration"
  value = [
    local_file.welcome.filename,
    local_file.config.filename,
    local_file.script.filename,
    local_sensitive_file.secrets.filename
  ]
}

# Output file contents (except sensitive)
output "welcome_content_preview" {
  description = "Preview of the welcome file content"
  value       = substr(local_file.welcome.content, 0, 100)
}

# Output JSON config structure
output "config_structure" {
  description = "Structure of the JSON configuration"
  value = {
    application_name = jsondecode(local_file.config.content).application.name
    environment      = jsondecode(local_file.config.content).application.environment
    features_count   = length(jsondecode(local_file.config.content).features)
  }
}

# Output script permissions
output "script_permissions" {
  description = "Permissions of the generated script"
  value       = local_file.script.file_permission
}

# Output creation timestamp
output "creation_info" {
  description = "Information about when resources were created"
  value = {
    terraform_workspace = terraform.workspace
    creation_time     = timestamp()
    working_directory = path.module
  }
}
